expression -> literal | unary | binary | grouping  ;

literal -> NUMBER | STRING | "nivyo" | "sivyo" | "ubusa";
        -> NUMBER | STRING | "true" | "false"; (optional hybrid language)

grouping -> "(" expression ")"

unary -> ( "-" | "!" ) expression

binary -> expression operator expression

operator -> "==" | "!=" | "<" | "<=" | ">" | ">=" | "+" | "-" | "*" | "/" ;



The Language allow multiple aliases of the same token, depending on the user's language preferences.

keyword_aliases = {
    "true": "TRUE",
    "nivyo": "TRUE",
    "false": "FALSE",
    "sivyo": "FALSE",
    "if": "IF",
    "nimba": "IF",
    "while": "WHILE",
    "mugihe": "WHILE",
    "for" : "FOR",
    "Subira" : "SUBIRA",
    "null" : "NULL",
    "ubusa" : "NULL"
}
